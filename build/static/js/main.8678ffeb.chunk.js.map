{"version":3,"sources":["components/Button/index.module.css","assets/topbar.module.css","assets/resumeEditor.module.css","assets/resumePreview.module.css","assets/app.module.css","serviceWorker.js","components/Button/index.js","components/Topbar.js","components/ResumeEditor.js","components/ResumePreview.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Button","props","buttonClick","clientX","clientY","myRef","current","getBoundingClientRect","deltaX","x","deltaY","y","setState","show","hideRiffle","state","React","createRef","this","content","left","className","styles","wrapper","style","marginLeft","onClick","ref","buttonStyle","spanStyle","onAnimationEnd","width","height","type","color","backgroundColor","top","Component","Topbar","page","ResumeEditor","ResumePreview","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,OAAS,yB,gBCA7DD,EAAOC,QAAU,CAAC,KAAO,uB,gBCAzBD,EAAOC,QAAU,CAAC,KAAO,6B,gBCAzBD,EAAOC,QAAU,CAAC,KAAO,8B,gBCAzBD,EAAOC,QAAU,CAAC,KAAO,oB,gICWLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uDCbeC,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KASVC,YAAc,YAAyB,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,QAAa,EACnB,EAAKC,MAAMC,QAAQC,wBAC5BC,EAASL,EAFmB,EAC3BM,EACsB,EACvBC,EAASN,EAHmB,EACxBO,EAEmB,EAC7B,EAAKC,SAAS,CACVC,MAAM,EACNL,SACAE,YAjBW,EAqBnBI,WAAa,WACT,EAAKF,SAAS,CAACC,MAAM,KApBrB,EAAKE,MAAQ,CACTF,MAAM,EACNL,OAAQ,EACRE,OAAQ,GAEZ,EAAKL,MAAQW,IAAMC,YAPJ,E,sEAiET,IACCJ,EAAQK,KAAKH,MAAbF,KADF,EAE4BK,KAAKjB,MAFjC,IAEEkB,eAFF,MAEY,GAFZ,MAEgBC,YAFhB,MAEuB,EAFvB,EAIL,OACI,yBAAKC,UAAWC,IAAOC,QAASC,MAAO,CAACC,WAAYL,IAChD,4BAAQM,QAASR,KAAKhB,YACdyB,IAAKT,KAAKb,MACVmB,MAAON,KAAKU,aAEfT,GAGJN,EAAO,0BAAMW,MAAON,KAAKW,UAAWC,eAAgBZ,KAAKJ,aAAsB,Q,kCArDzE,IAAD,EACsCI,KAAKjB,MAD3C,IACP8B,aADO,MACC,GADD,MACKC,cADL,MACc,GADd,MACkBC,KAgBhC,MAdqB,CACjB,QAAW,CACPF,QACAC,SACAE,MAAO,OACPC,gBAAiB,WAGrB,QAAW,CACPJ,QACAC,gBAbM,MACyB,UADzB,K,gCAoBD,IAAD,EACad,KAAKH,MAAvBP,EADK,EACLA,OAAQE,EADH,EACGA,OADH,EAEeQ,KAAKjB,MAAzBgC,KAeP,MAbmB,CACf,QAAW,CACPb,KAAMZ,EACN4B,IAAK1B,EACLyB,gBAAiB,yBAGrB,QAAW,CACPf,KAAMZ,EACN4B,IAAK1B,SAbD,MAEE,UAFF,O,GA9CgB2B,a,gBCgBrBC,E,iLAdP,OACI,yBAAKjB,UAAWC,IAAOiB,MACnB,yBAAKlB,UAAU,WACX,0BAAMA,UAAU,QAAhB,UACA,yBAAKA,UAAU,WACX,kBAAC,EAAD,CAAQF,QAAQ,eAAKc,KAAK,YAC1B,kBAAC,EAAD,CAAQd,QAAQ,eAAKC,KAAM,Y,GAR9BiB,a,iBCSNG,E,iLARP,OACI,yBAAKnB,UAAWC,IAAOiB,MAAvB,0B,GAHeF,a,iBCUZI,E,iLARP,OACI,yBAAKpB,UAAWC,IAAOiB,MAAvB,2B,GAHgBF,a,+BCqBbK,E,iLAdP,OACI,yBAAKrB,UAAWC,IAAOiB,MACnB,gCACI,kBAAC,EAAD,OAEJ,8BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GATFF,aCJlBM,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SN8H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8678ffeb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Button_wrapper__1MnD1\",\"riffle\":\"Button_riffle__2j8WD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"topbar_page__2hfuV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"resumeEditor_page__3jrnv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"resumePreview_page__JfW-k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"app_page__lwJUP\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//带涟漪的按钮\r\n\r\nimport React, {Component} from 'react';\r\nimport styles from './index.module.css';\r\n\r\nexport default class Button extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n            deltaX: 0,\r\n            deltaY: 0\r\n        };\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    buttonClick = ({clientX, clientY}) => {\r\n        const {x, y} = this.myRef.current.getBoundingClientRect();\r\n        const deltaX = clientX - x - 5;\r\n        const deltaY = clientY - y - 5;\r\n        this.setState({\r\n            show: true,\r\n            deltaX,\r\n            deltaY\r\n        });\r\n    };\r\n\r\n    hideRiffle = () => {\r\n        this.setState({show: false});\r\n    };\r\n\r\n    get buttonStyle() {\r\n        const {width = 72, height = 32, type = 'default'} = this.props;\r\n\r\n        const buttonStyles = {\r\n            'primary': {\r\n                width,\r\n                height,\r\n                color: '#fff',\r\n                backgroundColor: '#02af5f'\r\n            },\r\n\r\n            'default': {\r\n                width,\r\n                height\r\n            }\r\n        };\r\n\r\n        return buttonStyles[type];\r\n    }\r\n\r\n    get spanStyle() {\r\n        const {deltaX, deltaY} = this.state;\r\n        const {type = 'default'} = this.props;\r\n\r\n        const spanStyles = {\r\n            'primary': {\r\n                left: deltaX,\r\n                top: deltaY,\r\n                backgroundColor: 'rgba(2, 175, 95, 0.3)'\r\n            },\r\n\r\n            'default': {\r\n                left: deltaX,\r\n                top: deltaY\r\n            }\r\n        };\r\n\r\n        return spanStyles[type];\r\n    }\r\n\r\n    render() {\r\n        const {show} = this.state;\r\n        const {content = '', left = 0} = this.props;\r\n\r\n        return (\r\n            <div className={styles.wrapper} style={{marginLeft: left}}>\r\n                <button onClick={this.buttonClick}\r\n                        ref={this.myRef}\r\n                        style={this.buttonStyle}\r\n                >\r\n                    {content}\r\n                </button>\r\n\r\n                {show ? <span style={this.spanStyle} onAnimationEnd={this.hideRiffle}></span> : null}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Button from './Button';\r\n\r\nimport styles from '../assets/topbar.module.css';\r\n\r\nclass Topbar extends Component {\r\n    render() {\r\n        return (\r\n            <div className={styles.page}>\r\n                <div className=\"wrapper\">\r\n                    <span className=\"logo\">Resume</span>\r\n                    <div className=\"actions\">\r\n                        <Button content='保存' type='primary'/>\r\n                        <Button content='预览' left={10}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Topbar;","import React, {Component} from 'react';\r\n\r\nimport styles from '../assets/resumeEditor.module.css';\r\n\r\nclass ResumeEditor extends Component {\r\n    render() {\r\n        return (\r\n            <div className={styles.page}>\r\n                i am resume editor\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResumeEditor;","import React, {Component} from 'react';\r\n\r\nimport styles from '../assets/resumePreview.module.css';\r\n\r\nclass ResumePreview extends Component {\r\n    render() {\r\n        return (\r\n            <div className={styles.page}>\r\n                i am resume preview\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResumePreview;","import React, {Component} from 'react';\r\nimport Topbar from './components/Topbar';\r\nimport ResumeEditor from './components/ResumeEditor';\r\nimport ResumePreview from './components/ResumePreview';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport './assets/reset.css';\r\nimport styles from './assets/app.module.css';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className={styles.page}>\r\n                <header>\r\n                    <Topbar/>\r\n                </header>\r\n                <main>\r\n                    <ResumeEditor/>\r\n                    <ResumePreview/>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}