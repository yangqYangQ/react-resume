{"version":3,"sources":["components/logInAndSignUp.js","Home.js","serviceWorker.js","utils/AVInit.js","index.js"],"names":["logInAndSignUp","props","changeActionType","actionType","target","value","setState","signUp","e","preventDefault","formData","state","user","AV","User","setUsername","username","setPassword","password","then","setCurrentUser","error","window","alert","inputChange","key","logIn","this","id","type","onChange","checked","onSubmit","Component","Form","className","name","event","TabItem","Home","getUserTodos","currentUser","Query","find","todos","length","content","attributes","todoList","JSON","parse","todoListId","keyPressed","title","newTodo","createdAt","Date","done","saveOrUpdateTodos","checkboxChange","index","slice","deleteOneTodo","updateTodos","saveTodos","todo","Object","createWithoutData","set","stringify","save","extend","acl","ACL","setReadAccess","current","setWriteAccess","setACL","getCurrentUser","logOut","location","reload","onClick","onKeyPress","map","Boolean","hostname","match","init","appId","appKey","serverURLs","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.676c7264.chunk.js","sourcesContent":["//login and signup component\r\n\r\n// username   password\r\n//  yangq      yangq\r\n//  test       test\r\nimport React, {Component} from 'react';\r\nimport AV from 'leancloud-storage';\r\n\r\nclass logInAndSignUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            actionType: 'login',\r\n            formData: {\r\n                username: '',\r\n                password: ''\r\n            }\r\n        };\r\n    }\r\n\r\n    changeActionType = ({target: {value: actionType}}) => {\r\n        this.setState({actionType});\r\n    };\r\n\r\n    signUp = (e) => {\r\n        e.preventDefault();\r\n\r\n        const {formData} = this.state;\r\n        var user = new AV.User();\r\n        user.setUsername(formData.username);\r\n        user.setPassword(formData.password);\r\n        user.signUp().then((user) => {\r\n            // 注册成功\r\n            this.props.setCurrentUser && this.props.setCurrentUser();\r\n        }, (error) => {\r\n            // 注册失败（通常是因为用户名已被使用）\r\n            window.alert(error);\r\n        });\r\n    };\r\n\r\n    inputChange = (key, value) => {\r\n        this.setState({\r\n            formData: {\r\n                ...this.state.formData,\r\n                [key]: value\r\n            }\r\n        });\r\n    };\r\n\r\n    logIn = (e) => {\r\n        e.preventDefault();\r\n\r\n        const {formData: {username, password}} = this.state;\r\n        AV.User.logIn(username, password).then((user) => {\r\n            // 登录成功\r\n            this.props.setCurrentUser && this.props.setCurrentUser();\r\n        }, (error) => {\r\n            // 登录失败（可能是密码错误）\r\n            window.alert(error);\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {actionType, formData} = this.state;\r\n\r\n        return (\r\n            <section id=\"logInAndSignUp\">\r\n                <div>\r\n                    <TabItem type={'login'} onChange={this.changeActionType} checked={actionType === 'login'}/>\r\n                    <TabItem type={'signup'} onChange={this.changeActionType} checked={actionType === 'signup'}/>\r\n                </div>\r\n\r\n                <Form actionType={actionType}\r\n                      formData={formData}\r\n                      onSubmit={actionType === 'login' ? this.logIn : this.signUp}\r\n                      inputChange={this.inputChange}\r\n                />\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default logInAndSignUp;\r\n\r\n// login or signup form\r\nclass Form extends Component {\r\n    render() {\r\n        const {actionType, formData, onSubmit, inputChange} = this.props;\r\n        return (\r\n            <div className={actionType}>\r\n                <form onSubmit={onSubmit}>\r\n                    <div className=\"formRow\">\r\n                        <label>\r\n                            用户名\r\n                            <input type=\"text\" name='username'\r\n                                   value={formData.username}\r\n                                   onChange={(event) => inputChange('username', event.target.value)}\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"formRow\">\r\n                        <label>\r\n                            密码\r\n                            <input type='password' name='password'\r\n                                   value={formData.password}\r\n                                   onChange={(event) => inputChange('password', event.target.value)}\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"formActions\">\r\n                        <input type=\"submit\" value={actionType === 'login' ? '登录' : '注册'}/>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//login or signup tab\r\nclass TabItem extends Component {\r\n    render() {\r\n        const {type, checked, onChange} = this.props;\r\n        return (\r\n            <label>\r\n                <input type='radio' name='type' value={type}\r\n                       checked={checked}\r\n                       onChange={onChange}\r\n                />\r\n                {type === 'login' ? '登录' : '注册'}\r\n            </label>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport AV from 'leancloud-storage';\r\nimport LogInAndSignUp from './components/logInAndSignUp';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newTodo: '',\r\n            todoList: [],\r\n            todoListId: null,\r\n            currentUser: this.getCurrentUser()\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUserTodos();\r\n    }\r\n\r\n    getUserTodos = () => {\r\n        if (this.state.currentUser) {\r\n            let query = new AV.Query('ToDo');\r\n            query.find().then((todos) => {\r\n                if (todos.length > 0) {\r\n                    let {id, attributes: {content}} = todos[0];\r\n                    this.setState({\r\n                        todoList: JSON.parse(content),\r\n                        todoListId: id\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    keyPressed = (event) => {\r\n        if (event.key === 'Enter') {\r\n            this.setState({\r\n                todoList: [\r\n                    ...this.state.todoList,\r\n                    {\r\n                        title: this.state.newTodo,\r\n                        createdAt: new Date(),\r\n                        done: false\r\n                    }\r\n                ],\r\n                newTodo: ''\r\n            }, this.saveOrUpdateTodos);\r\n        }\r\n    };\r\n\r\n    inputChange = (event) => {\r\n        this.setState({newTodo: event.target.value});\r\n    };\r\n\r\n    checkboxChange = (event, index) => {\r\n        const {todoList} = this.state;\r\n        this.setState({\r\n            todoList: [\r\n                ...todoList.slice(0, index),\r\n                {\r\n                    ...todoList[index],\r\n                    done: event.target.checked\r\n                },\r\n                ...todoList.slice(index + 1)\r\n            ]\r\n        }, this.saveOrUpdateTodos);\r\n    };\r\n\r\n    deleteOneTodo = (index) => {\r\n        const {todoList} = this.state;\r\n        this.setState({\r\n            todoList: [\r\n                ...todoList.slice(0, index),\r\n                ...todoList.slice(index + 1)\r\n            ]\r\n        }, this.saveOrUpdateTodos);\r\n    };\r\n\r\n    saveOrUpdateTodos = () => {\r\n        if (this.state.todoListId) {\r\n            this.updateTodos();\r\n        } else {\r\n            this.saveTodos();\r\n        }\r\n    };\r\n\r\n    updateTodos = () => {\r\n        var todo = AV.Object.createWithoutData('ToDo', this.state.todoListId);\r\n        todo.set('content', JSON.stringify(this.state.todoList));\r\n        todo.save().then(() => {\r\n            alert('修改成功');\r\n        });\r\n    };\r\n\r\n    saveTodos = () => {\r\n        var Todo = AV.Object.extend('ToDo');\r\n        var todo = new Todo();\r\n        todo.set('content', JSON.stringify(this.state.todoList));\r\n\r\n        //set access control\r\n        var acl = new AV.ACL();\r\n\r\n        //only the current user can read and write\r\n        acl.setReadAccess(AV.User.current(), true);\r\n        acl.setWriteAccess(AV.User.current(), true);\r\n        todo.setACL(acl);\r\n\r\n        todo.save().then((todo) => {\r\n            // 成功保存之后，执行其他逻辑\r\n            this.setState({todoListId: todo.id});\r\n            alert('保存成功');\r\n        }, (error) => {\r\n            // 异常处理\r\n            alert('保存失败');\r\n        });\r\n    };\r\n\r\n    getCurrentUser = () => {\r\n        let current = AV.User.current();\r\n        if (current) {\r\n            let {id, createdAt, attributes: {username}} = current;\r\n            return {id, createdAt, username};\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    //注册 或 登录 成功\r\n    setCurrentUser = () => {\r\n        const currentUser = this.getCurrentUser();\r\n        this.setState({currentUser}, this.getUserTodos);\r\n    };\r\n\r\n    logOut = () => {\r\n        AV.User.logOut();\r\n        this.setState({currentUser: null});\r\n        window.location.reload();\r\n    };\r\n\r\n    render() {\r\n        const {newTodo, todoList, currentUser} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    currentUser ?\r\n                        <section id=\"todo\">\r\n                            <button onClick={this.logOut}>登出</button>\r\n                            <p>您好，{currentUser.username}</p>\r\n                            <div className=\"newTasks\">\r\n                                <input type=\"text\" value={newTodo}\r\n                                       onChange={this.inputChange}\r\n                                       onKeyPress={this.keyPressed}\r\n                                />\r\n                            </div>\r\n                            <ol className='todos'>\r\n                                {\r\n                                    todoList.map((todo, index) => (\r\n                                        <li key={index}>\r\n                                            <input type=\"checkbox\" checked={todo.done}\r\n                                                   onChange={(event) => this.checkboxChange(event, index)}/>\r\n                                            {todo.title}\r\n                                            <span>{todo.done ? '已完成' : '未完成'}</span>\r\n                                            <button onClick={() => this.deleteOneTodo(index)}>删除</button>\r\n                                        </li>\r\n                                    ))\r\n                                }\r\n                            </ol>\r\n                        </section> :\r\n                        <LogInAndSignUp setCurrentUser={this.setCurrentUser}/>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import AV from 'leancloud-storage';\r\n\r\nconst APP_ID = 'k58h4jiihwDiEPflgudmW0hn-gzGzoHsz';\r\nconst APP_KEY = 'Bx9RfPsybeB6jiOUfe2JJVS9';\r\nconst SERVER_URLS = 'https://k58h4jii.lc-cn-n1-shared.com';\r\n\r\nAV.init({\r\n    appId: APP_ID,\r\n    appKey: APP_KEY,\r\n    serverURLs: SERVER_URLS\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Home from './Home';\nimport './reset.css';\nimport * as serviceWorker from './serviceWorker';\nimport './utils/AVInit';\n\nReactDOM.render(<Home/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}